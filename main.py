import os
import sqlite3
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.uic import loadUiType

import icons_rc


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(968, 516)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        MainWindow.setFont(font)
        MainWindow.setToolTip("")
        MainWindow.setStatusTip("")
        MainWindow.setWhatsThis("")
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setDockOptions(QtWidgets.QMainWindow.AllowNestedDocks|QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainTab = QtWidgets.QTabWidget(self.centralwidget)
        self.mainTab.setGeometry(QtCore.QRect(120, 0, 851, 471))
        self.mainTab.setObjectName("mainTab")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tableMain = QtWidgets.QTableWidget(self.tab)
        self.tableMain.setGeometry(QtCore.QRect(0, 80, 841, 361))
        self.tableMain.setObjectName("tableMain")
        self.tableMain.setColumnCount(6)
        self.tableMain.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableMain.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableMain.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableMain.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableMain.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableMain.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableMain.setHorizontalHeaderItem(5, item)
        self.btnAddOperation = QtWidgets.QPushButton(self.tab)
        self.btnAddOperation.setGeometry(QtCore.QRect(740, 30, 75, 23))
        self.btnAddOperation.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btnAddOperation.setFlat(False)
        self.btnAddOperation.setObjectName("btnAddOperation")
        self.txtOperationBookTitle = QtWidgets.QLineEdit(self.tab)
        self.txtOperationBookTitle.setGeometry(QtCore.QRect(20, 30, 251, 20))
        self.txtOperationBookTitle.setObjectName("txtOperationBookTitle")
        self.comboBoxDuration = QtWidgets.QComboBox(self.tab)
        self.comboBoxDuration.setGeometry(QtCore.QRect(590, 30, 69, 22))
        self.comboBoxDuration.setObjectName("comboBoxDuration")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxDuration.addItem("")
        self.comboBoxOperation = QtWidgets.QComboBox(self.tab)
        self.comboBoxOperation.setGeometry(QtCore.QRect(360, 30, 111, 22))
        self.comboBoxOperation.setObjectName("comboBoxOperation")
        self.comboBoxOperation.addItem("")
        self.comboBoxOperation.addItem("")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(310, 30, 47, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(510, 30, 71, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.mainTab.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabBooks = QtWidgets.QTabWidget(self.tab_2)
        self.tabBooks.setGeometry(QtCore.QRect(0, 0, 851, 451))
        self.tabBooks.setObjectName("tabBooks")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.txtAddBookTitle = QtWidgets.QLineEdit(self.tab_5)
        self.txtAddBookTitle.setGeometry(QtCore.QRect(30, 50, 301, 20))
        self.txtAddBookTitle.setObjectName("txtAddBookTitle")
        self.txtAddBookDesc = QtWidgets.QTextEdit(self.tab_5)
        self.txtAddBookDesc.setGeometry(QtCore.QRect(30, 80, 301, 231))
        self.txtAddBookDesc.setObjectName("txtAddBookDesc")
        self.txtAddBookCode = QtWidgets.QLineEdit(self.tab_5)
        self.txtAddBookCode.setGeometry(QtCore.QRect(510, 50, 301, 20))
        self.txtAddBookCode.setObjectName("txtAddBookCode")
        self.txtAddBookPrice = QtWidgets.QLineEdit(self.tab_5)
        self.txtAddBookPrice.setGeometry(QtCore.QRect(510, 200, 301, 20))
        self.txtAddBookPrice.setObjectName("txtAddBookPrice")
        self.cmbBoxAddBookCat = QtWidgets.QComboBox(self.tab_5)
        self.cmbBoxAddBookCat.setGeometry(QtCore.QRect(510, 80, 301, 22))
        self.cmbBoxAddBookCat.setObjectName("cmbBoxAddBookCat")
        self.cmbBoxAddBookCat.addItem("")
        self.cmbBoxAddBookAuthor = QtWidgets.QComboBox(self.tab_5)
        self.cmbBoxAddBookAuthor.setGeometry(QtCore.QRect(510, 120, 301, 22))
        self.cmbBoxAddBookAuthor.setObjectName("cmbBoxAddBookAuthor")
        self.cmbBoxAddBookAuthor.addItem("")
        self.cmbBoxAddBookPublisher = QtWidgets.QComboBox(self.tab_5)
        self.cmbBoxAddBookPublisher.setGeometry(QtCore.QRect(510, 160, 301, 22))
        self.cmbBoxAddBookPublisher.setObjectName("cmbBoxAddBookPublisher")
        self.cmbBoxAddBookPublisher.addItem("")
        self.btnAddBook = QtWidgets.QPushButton(self.tab_5)
        self.btnAddBook.setGeometry(QtCore.QRect(730, 290, 75, 23))
        self.btnAddBook.setObjectName("btnAddBook")
        self.tabBooks.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.txtEditBookCode = QtWidgets.QLineEdit(self.tab_6)
        self.txtEditBookCode.setGeometry(QtCore.QRect(510, 90, 301, 20))
        self.txtEditBookCode.setObjectName("txtEditBookCode")
        self.cmbBoxEditAuthor = QtWidgets.QComboBox(self.tab_6)
        self.cmbBoxEditAuthor.setGeometry(QtCore.QRect(510, 160, 301, 22))
        self.cmbBoxEditAuthor.setObjectName("cmbBoxEditAuthor")
        self.cmbBoxEditAuthor.addItem("")
        self.txtEditBookPrice = QtWidgets.QLineEdit(self.tab_6)
        self.txtEditBookPrice.setGeometry(QtCore.QRect(510, 240, 301, 20))
        self.txtEditBookPrice.setObjectName("txtEditBookPrice")
        self.btnBookSave = QtWidgets.QPushButton(self.tab_6)
        self.btnBookSave.setGeometry(QtCore.QRect(730, 330, 75, 23))
        self.btnBookSave.setObjectName("btnBookSave")
        self.txtEditBookTitle = QtWidgets.QLineEdit(self.tab_6)
        self.txtEditBookTitle.setGeometry(QtCore.QRect(30, 90, 301, 20))
        self.txtEditBookTitle.setObjectName("txtEditBookTitle")
        self.txtEditBookDesc = QtWidgets.QTextEdit(self.tab_6)
        self.txtEditBookDesc.setGeometry(QtCore.QRect(30, 120, 301, 231))
        self.txtEditBookDesc.setObjectName("txtEditBookDesc")
        self.cmbBoxEditCat = QtWidgets.QComboBox(self.tab_6)
        self.cmbBoxEditCat.setGeometry(QtCore.QRect(510, 120, 301, 22))
        self.cmbBoxEditCat.setObjectName("cmbBoxEditCat")
        self.cmbBoxEditCat.addItem("")
        self.cmbBoxEditPublisher = QtWidgets.QComboBox(self.tab_6)
        self.cmbBoxEditPublisher.setGeometry(QtCore.QRect(510, 200, 301, 22))
        self.cmbBoxEditPublisher.setObjectName("cmbBoxEditPublisher")
        self.cmbBoxEditPublisher.addItem("")
        self.txtSearchBookTitle = QtWidgets.QLineEdit(self.tab_6)
        self.txtSearchBookTitle.setGeometry(QtCore.QRect(30, 20, 301, 20))
        self.txtSearchBookTitle.setObjectName("txtSearchBookTitle")
        self.btnSearchBooks = QtWidgets.QPushButton(self.tab_6)
        self.btnSearchBooks.setGeometry(QtCore.QRect(510, 20, 75, 23))
        self.btnSearchBooks.setObjectName("btnSearchBooks")
        self.btnDeleteBook = QtWidgets.QPushButton(self.tab_6)
        self.btnDeleteBook.setGeometry(QtCore.QRect(640, 330, 75, 23))
        self.btnDeleteBook.setObjectName("btnDeleteBook")
        self.tabBooks.addTab(self.tab_6, "")
        self.mainTab.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.groupBoxAddNewUsr = QtWidgets.QGroupBox(self.tab_3)
        self.groupBoxAddNewUsr.setGeometry(QtCore.QRect(20, 20, 381, 401))
        self.groupBoxAddNewUsr.setObjectName("groupBoxAddNewUsr")
        self.txtNewUser = QtWidgets.QLineEdit(self.groupBoxAddNewUsr)
        self.txtNewUser.setGeometry(QtCore.QRect(40, 110, 291, 20))
        self.txtNewUser.setMaxLength(50)
        self.txtNewUser.setObjectName("txtNewUser")
        self.txtNewEmail = QtWidgets.QLineEdit(self.groupBoxAddNewUsr)
        self.txtNewEmail.setGeometry(QtCore.QRect(40, 140, 291, 20))
        self.txtNewEmail.setMaxLength(50)
        self.txtNewEmail.setObjectName("txtNewEmail")
        self.txtNewPasswd = QtWidgets.QLineEdit(self.groupBoxAddNewUsr)
        self.txtNewPasswd.setGeometry(QtCore.QRect(40, 170, 291, 20))
        self.txtNewPasswd.setInputMask("")
        self.txtNewPasswd.setMaxLength(32767)
        self.txtNewPasswd.setEchoMode(QtWidgets.QLineEdit.Password)
        self.txtNewPasswd.setObjectName("txtNewPasswd")
        self.txtNewPasswdAgain = QtWidgets.QLineEdit(self.groupBoxAddNewUsr)
        self.txtNewPasswdAgain.setGeometry(QtCore.QRect(40, 200, 291, 20))
        self.txtNewPasswdAgain.setInputMask("")
        self.txtNewPasswdAgain.setMaxLength(32767)
        self.txtNewPasswdAgain.setEchoMode(QtWidgets.QLineEdit.Password)
        self.txtNewPasswdAgain.setObjectName("txtNewPasswdAgain")
        self.btnRegister = QtWidgets.QPushButton(self.groupBoxAddNewUsr)
        self.btnRegister.setGeometry(QtCore.QRect(150, 240, 75, 23))
        self.btnRegister.setObjectName("btnRegister")
        self.groupBoxEditInfo = QtWidgets.QGroupBox(self.tab_3)
        self.groupBoxEditInfo.setGeometry(QtCore.QRect(430, 20, 381, 401))
        self.groupBoxEditInfo.setObjectName("groupBoxEditInfo")
        self.txtUpdateUser = QtWidgets.QLineEdit(self.groupBoxEditInfo)
        self.txtUpdateUser.setEnabled(False)
        self.txtUpdateUser.setGeometry(QtCore.QRect(60, 190, 291, 20))
        self.txtUpdateUser.setMaxLength(50)
        self.txtUpdateUser.setObjectName("txtUpdateUser")
        self.txtUpdatePasswd = QtWidgets.QLineEdit(self.groupBoxEditInfo)
        self.txtUpdatePasswd.setEnabled(False)
        self.txtUpdatePasswd.setGeometry(QtCore.QRect(60, 250, 291, 20))
        self.txtUpdatePasswd.setMaxLength(50)
        self.txtUpdatePasswd.setEchoMode(QtWidgets.QLineEdit.Password)
        self.txtUpdatePasswd.setObjectName("txtUpdatePasswd")
        self.txtUpdateEmail = QtWidgets.QLineEdit(self.groupBoxEditInfo)
        self.txtUpdateEmail.setEnabled(False)
        self.txtUpdateEmail.setGeometry(QtCore.QRect(60, 220, 291, 20))
        self.txtUpdateEmail.setMaxLength(50)
        self.txtUpdateEmail.setObjectName("txtUpdateEmail")
        self.txtUpdateConfirmPasswd = QtWidgets.QLineEdit(self.groupBoxEditInfo)
        self.txtUpdateConfirmPasswd.setEnabled(False)
        self.txtUpdateConfirmPasswd.setGeometry(QtCore.QRect(60, 280, 291, 20))
        self.txtUpdateConfirmPasswd.setMaxLength(50)
        self.txtUpdateConfirmPasswd.setEchoMode(QtWidgets.QLineEdit.Password)
        self.txtUpdateConfirmPasswd.setObjectName("txtUpdateConfirmPasswd")
        self.btnUpdateUser = QtWidgets.QPushButton(self.groupBoxEditInfo)
        self.btnUpdateUser.setEnabled(False)
        self.btnUpdateUser.setGeometry(QtCore.QRect(170, 320, 75, 23))
        self.btnUpdateUser.setObjectName("btnUpdateUser")
        self.txtUserLogin = QtWidgets.QLineEdit(self.groupBoxEditInfo)
        self.txtUserLogin.setGeometry(QtCore.QRect(60, 30, 291, 20))
        self.txtUserLogin.setMaxLength(50)
        self.txtUserLogin.setObjectName("txtUserLogin")
        self.txtPasswdLogin = QtWidgets.QLineEdit(self.groupBoxEditInfo)
        self.txtPasswdLogin.setGeometry(QtCore.QRect(60, 60, 291, 20))
        self.txtPasswdLogin.setMaxLength(50)
        self.txtPasswdLogin.setEchoMode(QtWidgets.QLineEdit.Password)
        self.txtPasswdLogin.setObjectName("txtPasswdLogin")
        self.btnLogin = QtWidgets.QPushButton(self.groupBoxEditInfo)
        self.btnLogin.setGeometry(QtCore.QRect(170, 100, 75, 23))
        self.btnLogin.setObjectName("btnLogin")
        self.mainTab.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.tabSubSettings = QtWidgets.QTabWidget(self.tab_4)
        self.tabSubSettings.setGeometry(QtCore.QRect(0, 0, 851, 451))
        self.tabSubSettings.setElideMode(QtCore.Qt.ElideNone)
        self.tabSubSettings.setObjectName("tabSubSettings")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.tableCategory = QtWidgets.QTableWidget(self.tab_7)
        self.tableCategory.setGeometry(QtCore.QRect(0, 70, 841, 351))
        self.tableCategory.setObjectName("tableCategory")
        self.tableCategory.setColumnCount(1)
        self.tableCategory.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableCategory.setHorizontalHeaderItem(0, item)
        self.txtAddNewCategory = QtWidgets.QLineEdit(self.tab_7)
        self.txtAddNewCategory.setGeometry(QtCore.QRect(10, 20, 251, 20))
        self.txtAddNewCategory.setObjectName("txtAddNewCategory")
        self.btnAddCategory = QtWidgets.QPushButton(self.tab_7)
        self.btnAddCategory.setGeometry(QtCore.QRect(300, 20, 75, 23))
        self.btnAddCategory.setObjectName("btnAddCategory")
        self.tabSubSettings.addTab(self.tab_7, "")
        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")
        self.tableAuthor = QtWidgets.QTableWidget(self.tab_8)
        self.tableAuthor.setGeometry(QtCore.QRect(0, 70, 841, 351))
        self.tableAuthor.setObjectName("tableAuthor")
        self.tableAuthor.setColumnCount(1)
        self.tableAuthor.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableAuthor.setHorizontalHeaderItem(0, item)
        self.txtAddNewAuthor = QtWidgets.QLineEdit(self.tab_8)
        self.txtAddNewAuthor.setGeometry(QtCore.QRect(10, 20, 251, 20))
        self.txtAddNewAuthor.setObjectName("txtAddNewAuthor")
        self.btnAddAuthor = QtWidgets.QPushButton(self.tab_8)
        self.btnAddAuthor.setGeometry(QtCore.QRect(300, 20, 75, 23))
        self.btnAddAuthor.setObjectName("btnAddAuthor")
        self.tabSubSettings.addTab(self.tab_8, "")
        self.tab_9 = QtWidgets.QWidget()
        self.tab_9.setObjectName("tab_9")
        self.tablePublisher = QtWidgets.QTableWidget(self.tab_9)
        self.tablePublisher.setGeometry(QtCore.QRect(0, 70, 841, 351))
        self.tablePublisher.setObjectName("tablePublisher")
        self.tablePublisher.setColumnCount(1)
        self.tablePublisher.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tablePublisher.setHorizontalHeaderItem(0, item)
        self.txtAddNewPublisher = QtWidgets.QLineEdit(self.tab_9)
        self.txtAddNewPublisher.setGeometry(QtCore.QRect(10, 20, 251, 20))
        self.txtAddNewPublisher.setObjectName("txtAddNewPublisher")
        self.btnAddPublisher = QtWidgets.QPushButton(self.tab_9)
        self.btnAddPublisher.setGeometry(QtCore.QRect(300, 20, 75, 23))
        self.btnAddPublisher.setObjectName("btnAddPublisher")
        self.tabSubSettings.addTab(self.tab_9, "")
        self.mainTab.addTab(self.tab_4, "")
        self.btnMainDayToDay = QtWidgets.QPushButton(self.centralwidget)
        self.btnMainDayToDay.setGeometry(QtCore.QRect(20, 10, 81, 71))
        self.btnMainDayToDay.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icon/Today.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnMainDayToDay.setIcon(icon)
        self.btnMainDayToDay.setIconSize(QtCore.QSize(60, 60))
        self.btnMainDayToDay.setObjectName("btnMainDayToDay")
        self.btnMainBooks = QtWidgets.QPushButton(self.centralwidget)
        self.btnMainBooks.setGeometry(QtCore.QRect(20, 100, 81, 71))
        self.btnMainBooks.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icon/Books.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnMainBooks.setIcon(icon1)
        self.btnMainBooks.setIconSize(QtCore.QSize(60, 60))
        self.btnMainBooks.setObjectName("btnMainBooks")
        self.btnMainUsers = QtWidgets.QPushButton(self.centralwidget)
        self.btnMainUsers.setGeometry(QtCore.QRect(20, 190, 81, 71))
        self.btnMainUsers.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icon/User.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnMainUsers.setIcon(icon2)
        self.btnMainUsers.setIconSize(QtCore.QSize(60, 60))
        self.btnMainUsers.setObjectName("btnMainUsers")
        self.btnTheme = QtWidgets.QPushButton(self.centralwidget)
        self.btnTheme.setGeometry(QtCore.QRect(20, 370, 81, 71))
        self.btnTheme.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Icon/Theme.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnTheme.setIcon(icon3)
        self.btnTheme.setIconSize(QtCore.QSize(60, 60))
        self.btnTheme.setObjectName("btnTheme")
        self.btnMainSettings = QtWidgets.QPushButton(self.centralwidget)
        self.btnMainSettings.setGeometry(QtCore.QRect(20, 280, 81, 71))
        self.btnMainSettings.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Icon/Settings.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnMainSettings.setIcon(icon4)
        self.btnMainSettings.setIconSize(QtCore.QSize(60, 60))
        self.btnMainSettings.setObjectName("btnMainSettings")
        self.ThemeWindow = QtWidgets.QGroupBox(self.centralwidget)
        self.ThemeWindow.setEnabled(True)
        self.ThemeWindow.setGeometry(QtCore.QRect(320, 120, 361, 301))
        self.ThemeWindow.setStyleSheet("background-color: rgb(160, 160, 160);")
        self.ThemeWindow.setTitle("")
        self.ThemeWindow.setAlignment(QtCore.Qt.AlignCenter)
        self.ThemeWindow.setObjectName("ThemeWindow")
        self.btnLightTheme = QtWidgets.QPushButton(self.ThemeWindow)
        self.btnLightTheme.setGeometry(QtCore.QRect(80, 130, 91, 71))
        self.btnLightTheme.setObjectName("btnLightTheme")
        self.btnDarkTheme = QtWidgets.QPushButton(self.ThemeWindow)
        self.btnDarkTheme.setGeometry(QtCore.QRect(190, 130, 91, 71))
        self.btnDarkTheme.setObjectName("btnDarkTheme")
        self.label_3 = QtWidgets.QLabel(self.ThemeWindow)
        self.label_3.setGeometry(QtCore.QRect(100, 60, 181, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.btnDarkOrange = QtWidgets.QPushButton(self.ThemeWindow)
        self.btnDarkOrange.setGeometry(QtCore.QRect(80, 210, 91, 71))
        self.btnDarkOrange.setObjectName("btnDarkOrange")
        self.btnDarkGray = QtWidgets.QPushButton(self.ThemeWindow)
        self.btnDarkGray.setGeometry(QtCore.QRect(190, 210, 91, 71))
        self.btnDarkGray.setObjectName("btnDarkGray")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 968, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        self.mainTab.setCurrentIndex(0)
        self.tabBooks.setCurrentIndex(0)
        self.cmbBoxAddBookCat.setCurrentIndex(0)
        self.cmbBoxAddBookAuthor.setCurrentIndex(0)
        self.cmbBoxAddBookPublisher.setCurrentIndex(0)
        self.cmbBoxEditAuthor.setCurrentIndex(0)
        self.cmbBoxEditCat.setCurrentIndex(0)
        self.cmbBoxEditPublisher.setCurrentIndex(0)
        self.tabSubSettings.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



                ### UI Funtions ###

        def showDayToDay():
            self.mainTab.setCurrentIndex(0)

        def showBooksTab():
            self.mainTab.setCurrentIndex(1)

        def showUsersTab():
            self.mainTab.setCurrentIndex(2)

        def showSettingsTab():
            self.mainTab.setCurrentIndex(3)
            updateSettingsDB()

        def showThemeWindow():
            self.ThemeWindow.setVisible(True)

        def setLightTheme():
            self.ThemeWindow.setVisible(False)

        def setDarkTheme():
            self.ThemeWindow.setVisible(False)
        
        def setDarkOrangeTheme():
            style = open('Themes\DarkOrange.css', 'r')
            style = style.read()
            self.setStyleSheet(style)
            self.ThemeWindow.setVisible(False)

        ### USERS ###

        def addUser():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()

            usrName = self.txtNewUser.text()
            email = self.txtNewEmail.text()
            passwd = self.txtNewPasswd.text()
            passwd2 = self.txtNewPasswdAgain.text()

            if passwd == passwd2:
                cur.execute('INSERT INTO UsersDB(Name, Email, Password) VALUES(?, ?, ?)', (usrName, email, passwd, ))
                connection.commit()
                QMessageBox.information(self.tab_7, 'Success', 'You may now login with the entered credetnials', QMessageBox.Ok)
            elif passwd != passwd2:
                QMessageBox.warning(self.tab_7, 'Password not mathcing', 'Please make sure that you have typed your password right', QMessageBox.Ok)
            elif usrName == '' or usrName == ' ':
                QMessageBox.warning(self.tab_7, 'Empty field', 'Please make sure that you have filled all teh fields', QMessageBox.Ok)
            elif email == '' or email == ' ':
                QMessageBox.warning(self.tab_7, 'Empty field', 'Please make sure that you have filled all teh fields', QMessageBox.Ok)
            
            connection.close()

            self.txtNewUser.setText('')
            self.txtNewEmail.setText('')
            self.txtNewPasswd.setText('')
            self.txtNewPasswdAgain.setText('')

        def login():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()

            usrName = self.txtUserLogin.text()
            ### I dont want to store the passswdord in a variable

            cur.execute(f'SELECT Name, Email, Password FROM UsersDB WHERE Name = \'{usrName}\' AND Password = \'{self.txtPasswdLogin.text()}\'')
            data = cur.fetchone()
            if data:
                QMessageBox.information(self.tab_7, 'Successfully loged in', 'You have successfully loged in, you may now browse the app freely', QMessageBox.Ok)
                self.txtUpdateUser.setEnabled(True)
                self.txtUpdateEmail.setEnabled(True)
                self.txtUpdatePasswd.setEnabled(True)
                self.txtUpdateConfirmPasswd.setEnabled(True)
                self.btnUpdateUser.setEnabled(True)
                self.txtUpdateUser.setText(data[0])
                self.txtUpdateEmail.setText(data[1])
                connection.close()
            else:
                QMessageBox.warning(self.tab_7, 'Error', 'No mathcing Username or Password were found, please make sure you have entered everything correctly', QMessageBox.Ok)
            
            connection.close()


        def editUser():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()

            originalUsrName = self.txtUserLogin.text()
            originalPasswd = self.txtPasswdLogin.text()
            usrName = self.txtUpdateUser.text()
            email = self.txtUpdateEmail.text()
            passwd = self.txtUpdatePasswd.text()
            passwd2 = self.txtUpdateConfirmPasswd.text()

            if passwd == passwd2:
                cur.execute(f'UPDATE UsersDB SET Name = \'{usrName}\', Email = \'{email}\', Password = \'{passwd2}\' WHERE Name = \'{originalUsrName}\' AND Password = \'{originalPasswd}\'')
                connection.commit()
                QMessageBox.information(self.tab_7, 'Info updated', 'Your data hase been successfully updated, please login again', QMessageBox.Ok)
            else:
                QMessageBox.warning(self.tab_7, 'Error', 'No mathcing Username or Password were found, please make sure you have entered everything correctly', QMessageBox.Ok)

            connection.close()

        ### BOOKS ###

        def searchBook():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()

            bookTitle = self.txtSearchBookTitle.text()

            cur.execute(f'SELECT * FROM BooksDB WHERE Name = \'{bookTitle}\'')
            data = cur.fetchone()

            if data:
                self.txtEditBookTitle.setText(data[1])
                self.txtEditBookDesc.setText(data[2])
                self.txtEditBookCode.setText(data[3])
                self.cmbBoxEditCat.setCurrentIndex(int(data[4]))
                self.cmbBoxEditAuthor.setCurrentIndex(int(data[5]))
                self.cmbBoxEditPublisher.setCurrentIndex(int(data[6]))
                self.txtEditBookPrice.setText(str(data[7]))

        def editBook():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()

            searchBookTitle = self.txtSearchBookTitle.text()
            bookTitle = self.txtEditBookTitle.text()
            bookCode = self.txtEditBookCode.text()
            bookDesc = self.txtEditBookDesc.toPlainText()
            bookCat = self.cmbBoxEditCat.currentIndex()
            bookAuthor = self.cmbBoxEditAuthor.currentIndex()
            bookPublisher = self.cmbBoxEditPublisher.currentIndex()
            bookPrice = float(self.txtEditBookPrice.text())

            cur.execute(f'UPDATE BooksDB SET Name=\'{bookTitle}\', Descreption=\'{bookDesc}\', Code=\'{bookCode}\', Category=\'{bookCat}\', Author=\'{bookAuthor}\', Publisher=\'{bookPublisher}\', Price=\'{bookPrice}\' WHERE Name=\'{searchBookTitle}\'')
            connection.commit()
            connection.close()

        def deleteBook():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()

            bookTitle = self.txtSearchBookTitle.text()
            message = f"Are you sure that you want to delete the following book >>> {bookTitle}"
            warning = QMessageBox.warning(self.tab_6, 'Delete Book', 'Are you sure you want to delete this Book?', QMessageBox.Yes | QMessageBox.No)
            if warning == QMessageBox.Yes:
                cur.execute(f'DELETE FROM BooksDB WHERE Name = \'{bookTitle}\'')
                connection.commit()
                connection.close()
            else:
                connection.close()

        def addNewOperation():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()

            bookTitle = self.txtOperationBookTitle.text()
            operation = self.comboBoxOperation.currentText().text()
            duration = int(self.comboBoxDuration.currentText())

            cur.execute('INSERT INTO OperationsDB(Name, Type, Duration) VALUES(?, ?, ?)', (bookTitle, operation, duration))
            connection.commit()
            connection.close()
            self.txtOperationBookTitle.setText('')

        def addNewBook():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()

            bookTitle = self.txtAddBookTitle.text()
            bookCode = self.txtAddBookCode.text()
            bookDesc = self.txtAddBookDesc.toPlainText()
            bookCat = self.cmbBoxAddBookCat.currentIndex()
            bookAuthor = self.cmbBoxAddBookAuthor.currentIndex()
            bookPublisher = self.cmbBoxAddBookPublisher.currentIndex()
            bookPrice = float(self.txtAddBookPrice.text())

            cur.execute(f'INSERT INTO BooksDB(Name, Descreption, Code, Category, Author, Publisher, Price) VALUES(?, ?, ?, ?, ?, ?, ?)', (bookTitle, bookDesc, bookCode, bookCat, bookAuthor, bookPublisher, bookPrice, ))
            connection.commit()
            connection.close()

            self.txtAddBookTitle.setText('')
            self.txtAddBookCode.setText('')
            self.txtAddBookDesc.setText('')
            self.txtAddBookPrice.setText('')
            self.cmbBoxAddBookCat.setCurrentIndex(0)
            self.cmbBoxAddBookAuthor.setCurrentIndex(0)
            self.cmbBoxAddBookPublisher.setCurrentIndex(0)

        def addNewCat():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()
            category = self.txtAddNewCategory.text()
            cur.execute('INSERT INTO CategoriesDB(Name) VALUES(?)', (category, ))
            connection.commit()
            connection.close()
            self.txtAddNewCategory.setText('')
            updateSettingsDB()

        def addNewAutohr():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()
            author = self.txtAddNewAuthor.text()
            cur.execute('INSERT INTO AuthorsDB(Name) VALUES(?)', (author, ))
            connection.commit()
            connection.close()
            self.txtAddNewAuthor.setText('')
            updateSettingsDB()

        def addNewPublisher():
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()
            publisher = self.txtAddNewPublisher.text()
            cur.execute('INSERT INTO PublishersDB(Name) VALUES(?)', (publisher,))
            connection.commit()
            connection.close()
            self.txtAddNewPublisher.setText('')
            updateSettingsDB()

        def updateOperationsDB():
            ### first we need to clear out the entries and then add the new ones
            clearTables()
            ### Update the databse view for Categories ###
            connection = sqlite3.connect('LibraryDB.db')
            # connection.row_factory = sqlite3.Row
            cur = connection.cursor()
            cur.execute('SELECT Name FROM CategoriesDB')
            data = cur.fetchall()

            if data:
                self.tableCategory.insertRow(0)
                for row, form in enumerate(data):
                    for col, item in enumerate(form):
                        self.tableCategory.setItem(row, col, QTableWidgetItem(str(item)))
                        col += 1

                    rowCount = self.tableCategory.rowCount()
                    self.tableCategory.insertRow(rowCount)

        def updateSettingsDB():
            clearComboBoxes()
            clearTables()
            # first initilise a list so that we can loop over
            #  with mostly the same code-base
            tables = ['AuthorsDB', 'CategoriesDB', 'PublishersDB']
            connection = sqlite3.connect('LibraryDB.db')
            cur = connection.cursor()
            for table in tables:
                query = f'SELECT Name FROM {table}'
                # print(query)
                cur.execute(query)
                data = cur.fetchall()
                if data:
                    if table == 'AuthorsDB':
                        self.tableAuthor.insertRow(0)
                        for row, form in enumerate(data):
                            for col, item in enumerate(form):
                                self.tableAuthor.setItem(row, col, QTableWidgetItem(str(item)))
                                self.cmbBoxAddBookAuthor.addItem(str(item))
                                self.cmbBoxEditAuthor.addItem(str(item))
                                col += 1

                            rowCount = self.tableAuthor.rowCount()
                            self.tableAuthor.insertRow(rowCount)
                    
                    elif table == 'CategoriesDB':
                        self.tableCategory.insertRow(0)
                        for row, form in enumerate(data):
                            for col, item in enumerate(form):
                                self.tableCategory.setItem(row, col, QTableWidgetItem(str(item)))
                                self.cmbBoxAddBookCat.addItem(str(item))
                                self.cmbBoxEditCat.addItem(str(item))
                                col += 1

                            rowCount = self.tableCategory.rowCount()
                            self.tableCategory.insertRow(rowCount)

                    elif table == 'PublishersDB':
                        self.tablePublisher.insertRow(0)
                        for row, form in enumerate(data):
                            for col, item in enumerate(form):
                                self.tablePublisher.setItem(row, col, QTableWidgetItem(str(item)))
                                self.cmbBoxAddBookPublisher.addItem(str(item))
                                self.cmbBoxEditPublisher.addItem(str(item))
                                col += 1

                            rowCount = self.tablePublisher.rowCount()
                            self.tablePublisher.insertRow(rowCount)
    
        def clearComboBoxes():
            self.cmbBoxEditAuthor.clear()
            self.cmbBoxAddBookAuthor.clear()
            self.cmbBoxAddBookCat.clear()
            self.cmbBoxEditCat.clear()
            self.cmbBoxAddBookPublisher.clear()
            self.cmbBoxEditPublisher.clear()

        def clearTables():
            self.tableAuthor.clearContents()
            self.tableAuthor.setColumnCount(1)
            self.tableAuthor.setRowCount(0)
            self.tableCategory.clearContents()
            self.tableCategory.setColumnCount(1)
            self.tableCategory.setRowCount(0)
            self.tablePublisher.clearContents()
            self.tablePublisher.setColumnCount(1)
            self.tablePublisher.setRowCount(0)
            self.tableMain.clearContents()
            self.tableMain.setColumnCount(1)
            self.tableMain.setRowCount(0)

                ### Buttons ###
        self.btnMainDayToDay.clicked.connect(showDayToDay)
        self.btnMainBooks.clicked.connect(showBooksTab)
        self.btnMainUsers.clicked.connect(showUsersTab)
        self.btnMainSettings.clicked.connect(showSettingsTab)
        self.btnTheme.clicked.connect(showThemeWindow)
        self.btnLightTheme.clicked.connect(setLightTheme)
        self.btnDarkTheme.clicked.connect(setDarkTheme)
        self.btnDarkOrange.clicked.connect(setDarkOrangeTheme)
        self.btnAddCategory.clicked.connect(addNewCat)
        self.btnAddAuthor.clicked.connect(addNewAutohr)
        self.btnAddPublisher.clicked.connect(addNewPublisher)
        self.btnAddOperation.clicked.connect(addNewOperation)
        self.btnAddBook.clicked.connect(addNewBook)
        self.btnSearchBooks.clicked.connect(searchBook)
        self.btnBookSave.clicked.connect(editBook)
        self.btnDeleteBook.clicked.connect(deleteBook)
        self.btnLogin.clicked.connect(login)
        self.btnRegister.clicked.connect(addUser)
        self.btnUpdateUser.clicked.connect(editUser)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Library System"))
        item = self.tableMain.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Code"))
        item = self.tableMain.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Title"))
        item = self.tableMain.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Author"))
        item = self.tableMain.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Publisher"))
        item = self.tableMain.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableMain.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Price"))
        self.btnAddOperation.setText(_translate("MainWindow", "Add"))
        self.txtOperationBookTitle.setPlaceholderText(_translate("MainWindow", "Enter Book Title"))
        self.comboBoxDuration.setItemText(0, _translate("MainWindow", "1"))
        self.comboBoxDuration.setItemText(1, _translate("MainWindow", "2"))
        self.comboBoxDuration.setItemText(2, _translate("MainWindow", "3"))
        self.comboBoxDuration.setItemText(3, _translate("MainWindow", "4"))
        self.comboBoxDuration.setItemText(4, _translate("MainWindow", "5"))
        self.comboBoxDuration.setItemText(5, _translate("MainWindow", "6"))
        self.comboBoxDuration.setItemText(6, _translate("MainWindow", "7"))
        self.comboBoxDuration.setItemText(7, _translate("MainWindow", "8"))
        self.comboBoxDuration.setItemText(8, _translate("MainWindow", "9"))
        self.comboBoxDuration.setItemText(9, _translate("MainWindow", "10"))
        self.comboBoxOperation.setItemText(0, _translate("MainWindow", "Retrieve"))
        self.comboBoxOperation.setItemText(1, _translate("MainWindow", "Rent"))
        self.label.setText(_translate("MainWindow", "Type"))
        self.label_2.setText(_translate("MainWindow", "Duration(W)"))
        self.mainTab.setTabText(self.mainTab.indexOf(self.tab), _translate("MainWindow", "Operations"))
        self.txtAddBookTitle.setPlaceholderText(_translate("MainWindow", "Enter Book Title"))
        self.txtAddBookDesc.setPlaceholderText(_translate("MainWindow", "Enter Book Description"))
        self.txtAddBookCode.setPlaceholderText(_translate("MainWindow", "Enter Book Code"))
        self.txtAddBookPrice.setPlaceholderText(_translate("MainWindow", "Enter Book Price"))
        self.cmbBoxAddBookCat.setCurrentText(_translate("MainWindow", "Category"))
        self.cmbBoxAddBookCat.setItemText(0, _translate("MainWindow", "Category"))
        self.cmbBoxAddBookAuthor.setCurrentText(_translate("MainWindow", "Category"))
        self.cmbBoxAddBookAuthor.setItemText(0, _translate("MainWindow", "Category"))
        self.cmbBoxAddBookPublisher.setCurrentText(_translate("MainWindow", "Category"))
        self.cmbBoxAddBookPublisher.setItemText(0, _translate("MainWindow", "Category"))
        self.btnAddBook.setText(_translate("MainWindow", "Save"))
        self.tabBooks.setTabText(self.tabBooks.indexOf(self.tab_5), _translate("MainWindow", "Add New Book"))
        self.txtEditBookCode.setPlaceholderText(_translate("MainWindow", "Enter Book Code"))
        self.cmbBoxEditAuthor.setCurrentText(_translate("MainWindow", "Category"))
        self.cmbBoxEditAuthor.setItemText(0, _translate("MainWindow", "Category"))
        self.txtEditBookPrice.setPlaceholderText(_translate("MainWindow", "Enter Book Price"))
        self.btnBookSave.setText(_translate("MainWindow", "Save"))
        self.txtEditBookTitle.setPlaceholderText(_translate("MainWindow", "Edit Book Title"))
        self.txtEditBookDesc.setPlaceholderText(_translate("MainWindow", "Edit Book Description"))
        self.cmbBoxEditCat.setCurrentText(_translate("MainWindow", "Category"))
        self.cmbBoxEditCat.setItemText(0, _translate("MainWindow", "Category"))
        self.cmbBoxEditPublisher.setCurrentText(_translate("MainWindow", "Category"))
        self.cmbBoxEditPublisher.setItemText(0, _translate("MainWindow", "Category"))
        self.txtSearchBookTitle.setPlaceholderText(_translate("MainWindow", "Search Book Title"))
        self.btnSearchBooks.setText(_translate("MainWindow", "Search"))
        self.btnDeleteBook.setText(_translate("MainWindow", "Delete"))
        self.tabBooks.setTabText(self.tabBooks.indexOf(self.tab_6), _translate("MainWindow", "Edit or Delete Book"))
        self.mainTab.setTabText(self.mainTab.indexOf(self.tab_2), _translate("MainWindow", "Books"))
        self.groupBoxAddNewUsr.setTitle(_translate("MainWindow", "Add New User"))
        self.txtNewUser.setPlaceholderText(_translate("MainWindow", "User Name"))
        self.txtNewEmail.setPlaceholderText(_translate("MainWindow", "Email"))
        self.txtNewPasswd.setPlaceholderText(_translate("MainWindow", "Password"))
        self.txtNewPasswdAgain.setPlaceholderText(_translate("MainWindow", "Confirm Password"))
        self.btnRegister.setText(_translate("MainWindow", "Register"))
        self.groupBoxEditInfo.setTitle(_translate("MainWindow", "Edit User Info"))
        self.txtUpdateUser.setPlaceholderText(_translate("MainWindow", "User Name"))
        self.txtUpdatePasswd.setPlaceholderText(_translate("MainWindow", "Password"))
        self.txtUpdateEmail.setPlaceholderText(_translate("MainWindow", "Email"))
        self.txtUpdateConfirmPasswd.setPlaceholderText(_translate("MainWindow", "Confirm Password"))
        self.btnUpdateUser.setText(_translate("MainWindow", "Update"))
        self.txtUserLogin.setPlaceholderText(_translate("MainWindow", "User Name"))
        self.txtPasswdLogin.setPlaceholderText(_translate("MainWindow", "Password"))
        self.btnLogin.setText(_translate("MainWindow", "Login"))
        self.mainTab.setTabText(self.mainTab.indexOf(self.tab_3), _translate("MainWindow", "Users"))
        item = self.tableCategory.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Category"))
        self.txtAddNewCategory.setPlaceholderText(_translate("MainWindow", "Enter New Category Name"))
        self.btnAddCategory.setText(_translate("MainWindow", "Add"))
        self.tabSubSettings.setTabText(self.tabSubSettings.indexOf(self.tab_7), _translate("MainWindow", "Categories"))
        item = self.tableAuthor.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Author"))
        self.txtAddNewAuthor.setPlaceholderText(_translate("MainWindow", "Enter New Author Name"))
        self.btnAddAuthor.setText(_translate("MainWindow", "Add"))
        self.tabSubSettings.setTabText(self.tabSubSettings.indexOf(self.tab_8), _translate("MainWindow", "Author"))
        item = self.tablePublisher.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Publisher"))
        self.txtAddNewPublisher.setPlaceholderText(_translate("MainWindow", "Enter New Publisher Name"))
        self.btnAddPublisher.setText(_translate("MainWindow", "Add"))
        self.tabSubSettings.setTabText(self.tabSubSettings.indexOf(self.tab_9), _translate("MainWindow", "Publisher"))
        self.mainTab.setTabText(self.mainTab.indexOf(self.tab_4), _translate("MainWindow", "Settings"))
        self.btnLightTheme.setText(_translate("MainWindow", "Light Theme"))
        self.btnDarkTheme.setText(_translate("MainWindow", "Dark Theme"))
        self.label_3.setText(_translate("MainWindow", "Apply a new Theme"))
        self.btnDarkOrange.setText(_translate("MainWindow", "Dark Orange"))
        self.btnDarkGray.setText(_translate("MainWindow", "Dark Gray"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
